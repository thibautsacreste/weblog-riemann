; -*- mode: clojure; -*-
; vim: filetype=clojure

(logging/init {:file "riemann.log"})

; Listen on the local interface over TCP (5555), UDP (5555), and websockets
; (5556)
(let [host "127.0.0.1"]
  (tcp-server {:host host})
  (udp-server {:host host})
  (ws-server  {:host host})
  (repl-server {:host host}))

; Expire old events from the index every 5 seconds.
(periodically-expire 5)


(defn filter-keys [keys & children]
  (fn [e] (call-rescue (select-keys e keys) children)))

; returns 1 event every 'interval' with its metric set
; to the mean of 'field' values for all events received during that interval
(defn avg-over
  [interval field service & children]
  (let [downstream (sdo children)]
    (smap #(assoc % :metric (-> % field read-string))
          (rollup 1 interval
                  (smap folds/mean
                        (filter-keys [:time :metric :description :state :tags]
                                     (with {:host "nginx" :service service}
                                           (fn [e] (call-rescue e children)))))))))

(let [log-and-index (default :ttl 300
                             #(info %)
                             (index))]
  (streams

   ;#(info %)

   (where (and (service "nginx requests")
               (not (state "expired")))

          ;(expired #(warn "expired" %))
          ;(clock-skew prn)

          ;(with {:metric 1 :ttl 600} (rate 3 #(info %)))

          ; reqs/sec every 1 sec
          (with {:host "nginx" :service "nginx reqs/sec" :metric 1}
                (rate 1
                      (filter-keys [:host :service :time :metric :description :state :tags]
                                   log-and-index)))

          ; avg response time every 1 sec
          (avg-over 1 :request-time "nginx avg resp time"
                    (smap (fn [e] (assoc e :state (condp < (:metric e)
                                                    1000 "critical"
                                                    500 "warning"
                                                    "ok")))

                          log-and-index))

          )))
